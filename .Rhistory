proact <- rbind(training, training2, leaderboard, validation)
head(proact)
proact <- within(proact, {
SubjectID = as.character(SubjectID)
feature_delta = round((as.numeric(feature_delta)/365)*12, 2)
form_name = factor(form_name)
})
proact = distinct(proact)
summary(proact)
proact %>%
ggplot(aes(feature_delta)) +
geom_histogram()
proact = proact %>%
filter(feature_delta >= 0)
temp = proact %>%
count(SubjectID, form_name, feature_name, feature_unit,
feature_delta) %>%
filter(n == 1) %>%
select(-n)
proact = proact %>%
inner_join(temp, by = c("SubjectID","form_name","feature_name","feature_unit","feature_delta"))
demographic = proact %>%
filter(form_name == "Demographic") %>%
select(SubjectID, feature_name, feature_value)
demographic = spread(demographic, feature_name, feature_value)
demographic = within(demographic, {
Age = round(as.numeric(Age))
Gender = factor(Gender)
Race = factor(Race)
})
summary(demographic)
demographic = demographic[complete.cases(demographic),]
length(unique(demographic$SubjectID)) # 8646 patients
alshx = proact %>%
filter(form_name == "ALSHX") %>%
select(SubjectID, feature_name, feature_value)
alshx = spread(alshx, feature_name, feature_value)
alshx = within(alshx, {
diag_delta = as.numeric(as.character(diag_delta))
onset_delta = as.numeric(as.character(onset_delta))
onset_site = factor(onset_site)
})
summary(alshx)
alshx = alshx %>%
filter(diag_delta <= 0) %>%
filter(onset_delta <= 0)
alshx = within(alshx, {
diag_delta = -round((diag_delta/365)*12,2)
onset_delta = -round((onset_delta/365)*12,2)
onset2dx = onset_delta - diag_delta
})
alshx = alshx %>%
filter(onset2dx >= 0)
alshx = alshx[complete.cases(alshx),]
length(unique(alshx$SubjectID)) # 4442 patients
levels(alshx$onset_site)
alshx$onset_site = fct_collapse(alshx$onset_site, Nonbulbar = c("Limb","Limb and Bulbar","Other"))
A = unique(demographic$SubjectID)
B = unique(alshx$SubjectID)
venn.diagram(list(SetA = A, SetB = B), filename = "img/venndiagram.png", disable.logging = T)
alsfrs <- proact %>%
filter(form_name=="ALSFRS") %>%
select(-c(form_name,feature_unit))
head(alsfrs)
alsfrs$feature_value <- as.numeric(alsfrs$feature_value)
alsfrs$feature_name = factor(alsfrs$feature_name)
alsfrs_wide <- spread(alsfrs,key = feature_name, value = feature_value)
head(alsfrs_wide)
dim(alsfrs_wide) # 59284 records
length(unique(alsfrs_wide$SubjectID)) # 6510 patients
summary(alsfrs_wide)
temp2 = alsfrs_wide %>%
filter(!is.na(Q5a_Cutting_without_Gastrostomy)) %>%
filter(!is.na(Q5b_Cutting_with_Gastrostomy)) %>%
count(SubjectID, feature_delta)
dim(temp2) # 797 records
head(temp2)
dim(temp2)
temp2 = alsfrs_wide %>%
filter(!is.na(Q5a_Cutting_without_Gastrostomy)) %>%
filter(!is.na(Q5b_Cutting_with_Gastrostomy)) %>%
count(SubjectID, feature_delta)
head(temp2)
dim(temp2)
alsfrs_wide = alsfrs_wide %>%
anti_join(temp2, by = c("SubjectID", "feature_delta"))
alsfrs_wide = alsfrs_wide %>%
mutate(Gastrostomy = ifelse(is.na(Q5b_Cutting_with_Gastrostomy), F, T)) %>%
select(-c(Q5a_Cutting_without_Gastrostomy, Q5b_Cutting_with_Gastrostomy))
alsfrs_rev = alsfrs_wide %>%
select(-c(ALSFRS_Total,
Q10_Respiratory, respiratory))
alsfrs_rev = alsfrs_rev %>%
mutate(motor = hands + leg + trunk) %>%
rename(bulbar = mouth, respiratory = respiratory_R) %>%
select(-c(hands, leg, trunk))
summary(alsfrs_rev)
alsfrs_rev = alsfrs_rev[complete.cases(alsfrs_rev),]
length(unique(alsfrs_rev$SubjectID)) # 3275 patients
pt_lst = unique(alsfrs_rev$SubjectID)
set.seed(9)
spl = sample(pt_lst, 100, replace = F)
# Target event dataset
tg = alsfrs_rev %>%
select(SubjectID, feature_delta, Q3_Swallowing)
# Patients with fu duration <= 3 mo (group I)
lt3mo_fu = alsfrs_rev %>%
group_by(SubjectID) %>%
summarise(last_delta = max(feature_delta)) %>%
filter(last_delta <= 3)
dim(lt3mo_fu) # 322 patients (fu should be longer than 3 mo)
# Patients in whom event occurred at or before 3 mo (group II)
lt3mo_event = tg %>%
filter(Q3_Swallowing <= 1) %>%
group_by(SubjectID) %>%
summarise(feature_delta = min(feature_delta)) %>%
filter(feature_delta <= 3)
# if event occurred, it should be after 3 mo
dim(lt3mo_event) # 112 patients
# Exclude the above group I and II patients
tg2 = tg %>%
anti_join(lt3mo_fu, by = "SubjectID") %>%
anti_join(lt3mo_event, by = "SubjectID")
length(unique(tg2$SubjectID)) # 2857 patients
# event occurred
tg_event = tg2 %>%
filter(Q3_Swallowing <= 1) %>%
group_by(SubjectID) %>%
summarise(feature_delta = min(feature_delta)) %>%
mutate(event = 1)
tg_event = tg_event %>%
mutate(feature_delta = feature_delta - 3)
dim(tg_event) # 605 patients
# censored
tg_censored = tg2 %>%
anti_join(tg_event, by = "SubjectID") %>%
group_by(SubjectID) %>%
summarise(feature_delta = max(feature_delta)) %>%
mutate(feature_delta = feature_delta - 3) %>%
mutate(event = 0)
dim(tg_censored) # 2252 patients
tg_fin = rbind(tg_event, tg_censored)
# Calculate meta-features (means) of alsfrs_rev over the first 3 months
alsfrs_rev_mean_3mo = alsfrs_rev %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID) %>%
summarise(Gastrostomy = ifelse(any(Gastrostomy == T), T, F), # Gastrostomy == T if patients underwent gastrostomy during the first 3 mo
ALSFRS_Total = mean(ALSFRS_R_Total),
Q1_Speech = mean(Q1_Speech),
Q2_Salivation = mean(Q2_Salivation),
Q3_Swallowing = mean(Q3_Swallowing),
Q4_Handwriting = mean(Q4_Handwriting),
Q5_Cutting = mean(Q5_Cutting),
Q6_Dressing_and_Hygiene = mean(Q6_Dressing_and_Hygiene),
Q7_Turning_in_Bed = mean(Q7_Turning_in_Bed),
Q8_Walking = mean(Q8_Walking),
Q9_Climbing_Stairs = mean(Q9_Climbing_Stairs),
R1_Dyspnea = mean(R1_Dyspnea),
R2_Orthopnea = mean(R2_Orthopnea),
R3_Respiratory_Insufficiency = mean(R3_Respiratory_Insufficiency))
# Estimate meta-features (slopes) of alsfrs_rev over the first 3 months, using linear regression
alsfrs_rev_slope_3mo = alsfrs_rev %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID) %>%
mutate(interval = max(feature_delta) - min(feature_delta)) %>%
filter(interval >= 1.5)
df_data = alsfrs_rev_slope_3mo %>%
group_by(SubjectID) %>%
nest()
df_data
df_model = df_data %>%
mutate(model = map(data, ~lm(ALSFRS_R_Total ~ feature_delta,
data = .x)))
df_model
df_stat = df_model %>%
mutate(stat = map(model, ~tidy(.x)))
df_stat = df_model %>%
mutate(stat = map(model, ~tidy(.x)))
df_stat = df_model %>%
mutate(stat = map(model, ~tidy(.x)))
df_stat
df_est = df_stat %>%
unnest(stat)
df_est
alsfrs_rev_slope_3mo_total = df_est %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_total = estimate)
alsfrs_rev_slope_3mo_total
alsfrs_rev_slope_3mo_bulbar = alsfrs_rev_slope_3mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(bulbar ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_bulbar = estimate)
alsfrs_rev_slope_3mo_bulbar
alsfrs_rev_slope_3mo_bulbar = alsfrs_rev_slope_3mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(bulbar ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_bulbar = estimate)
alsfrs_rev_slope_3mo_bulbar
# Estimate slope_motor
alsfrs_rev_slope_3mo_motor = alsfrs_rev_slope_3mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(motor ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_motor = estimate)
alsfrs_rev_slope_3mo_motor
# Estimate slope_respiratory
alsfrs_rev_slope_3mo_resp = alsfrs_rev_slope_3mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(respiratory ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_resp = estimate)
alsfrs_rev_slope_3mo_resp
alsfrs_rev_3mo = alsfrs_rev_mean_3mo %>%
left_join(alsfrs_rev_slope_3mo_total, by = "SubjectID") %>%
left_join(alsfrs_rev_slope_3mo_bulbar, by = "SubjectID") %>%
left_join(alsfrs_rev_slope_3mo_motor, by = "SubjectID") %>%
left_join(alsfrs_rev_slope_3mo_resp, by = "SubjectID")
alsfrs_rev_3mo
# Estimate meta-features (slopes) of alsfrs_rev over 3 to 12 months, using linear regression
alsfrs_rev_slope_3to12mo = alsfrs_rev %>%
filter(feature_delta >= 3) %>%
filter(feature_delta <= 12) %>%
group_by(SubjectID) %>%
mutate(interval = last(feature_delta) - first(feature_delta)) %>%
filter(interval >= 6)
# Estimate slope_total
alsfrs_rev_slope_3to12mo_total = alsfrs_rev_slope_3to12mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(ALSFRS_R_Total ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(slope_total = estimate)
alsfrs_rev_slope_3to12mo_total
fvc = proact %>%
filter(form_name == "FVC") %>%
filter(feature_name == "fvc_percent") %>%
select(SubjectID, feature_name, feature_value, feature_delta)
fvc
fvc = fvc %>%
mutate(feature_value = round(as.numeric(feature_value))) %>%
rename(FVC = feature_value) %>%
select(-feature_name)
fvc = fvc[complete.cases(fvc),]
summary(fvc)
# Calculate fvc_mean for the first 3 mo
fvc_3mo_mean = fvc %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID) %>%
summarise(FVC = mean(FVC))
fvc_3mo_mean
# Estimate fvc_3mo_slope with linear regression (3 mo)
fvc_3mo = fvc %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID) %>%
mutate(interval = max(feature_delta) - min(feature_delta)) %>%
filter(interval >= 1.5) %>%
select(-interval)
fvc_3mo_slope = fvc_3mo %>%
group_by(SubjectID) %>%
nest() %>%
mutate(model = map(data, ~lm(FVC ~ feature_delta,
data = .x))) %>%
mutate(stat = map(model, ~tidy(.x))) %>%
unnest(stat) %>%
filter(term == "feature_delta") %>%
select(SubjectID, estimate) %>%
rename(FVC_3mo_slope = estimate)
fvc_3mo_slope
fvc_3mo = fvc_3mo_mean %>%
left_join(fvc_3mo_slope, by = "SubjectID")
fvc_3mo
rlz = proact %>%
filter(form_name == "Riluzole") %>%
select(-c(form_name, feature_unit, feature_delta)) %>%
mutate(feature_name = factor(feature_name),
feature_value = factor(feature_value))
summary(rlz)
vitals = proact %>%
filter(form_name == "Vitals") %>%
mutate(feature_name = factor(feature_name),
feature_value = as.numeric(feature_value)) %>%
select(-c(form_name, feature_unit))
summary(vitals)
levels(vitals$feature_name)
# Calculate mean BMI for the first 3 mo
bmi_3mo = vitals %>%
filter(feature_name  == "BMI") %>%
filter(feature_delta <= 3)
bmi_3mo_wide = spread(bmi_3mo, key = feature_name, value = feature_value)
bmi_3mo_mean = bmi_3mo_wide %>%
group_by(SubjectID) %>%
summarise(BMI = mean(BMI)*10000)
bmi_3mo_mean
vitalsign_3mo = vitals %>%
filter(feature_name %in%
c("bp_systolic", "bp_diastolic", "pulse",
"respiratory_rate", "temperature")) %>%
filter(feature_delta <= 3)
vitalsign_3mo_wide = spread(vitalsign_3mo, key = feature_name, value = feature_value)
vitalsign_3mo_wide = vitalsign_3mo_wide %>%
rename(dbp = bp_diastolic,
sbp = bp_systolic,
hr = pulse,
rr = respiratory_rate,
temp = temperature)
# Calculate mean vital sign over the first 3 mo
vitalsign_3mo_mean = vitalsign_3mo_wide %>%
group_by(SubjectID) %>%
summarise(dbp = mean(dbp),
sbp = mean(sbp),
hr = mean(hr),
rr = mean(rr),
temp = mean(temp))
vitalsign_3mo_mean
lab = proact %>%
filter(form_name == "Lab Test") %>%
select(-c(form_name, feature_unit)) %>%
mutate(feature_name = factor(feature_name),
feature_value = as.numeric(feature_value))
head(levels(lab$feature_name))
lab_subset = lab %>%
filter(feature_name %in%
c("Absolute Neutrophil Count",
"Absolute Lymphocyte Count",
"C-Reactive Protein",
"CK",
"Creatinine",
"GFR",
"Total Cholesterol",
"Triglycerides",
"HDL",
"LDL",
"Uric Acid",
"Urine Creatinine",
"Urine Creatinine Clearance"
))
# Calculate mean
lab_data = lab_subset %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID, feature_name) %>%
nest()
# Calculate mean
lab_data = lab_subset %>%
filter(feature_delta <= 3) %>%
group_by(SubjectID, feature_name) %>%
nest()
lab_data
lab_3mo_mean = lab_data %>%
mutate(mean = map_dbl(data, ~mean(.x$feature_value))) %>%
select(-data)
lab_3mo_mean
df = demographic %>%
inner_join(alshx, by = "SubjectID") %>%
inner_join(alsfrs_rev_3mo, by = "SubjectID") %>%
left_join(fvc_3mo, by = "SubjectID") %>%
left_join(rlz, by = "SubjectID") %>%
left_join(bmi_3mo_mean, by = "SubjectID") %>%
left_join(vitalsign_3mo_mean, by = "SubjectID") %>%
left_join(lab_3mo_mean, by = "SubjectID")
fvc = proact %>%
filter(form_name == "FVC") %>%
filter(feature_name == "fvc_percent") %>%
select(SubjectID, feature_name, feature_value, feature_delta)
head(fvc)
training <- read.delim("https://www.dropbox.com/s/efmua6cro6goh6u/all_forms_PROACT_training.txt?dl=1")
head(training)
training <- read.delim("https://www.dropbox.com/s/efmua6cro6goh6u/all_forms_PROACT_training.txt?dl=1", sep = "|", header = T)
head(training)
training2<-read.delim("https://www.dropbox.com/s/ps9ouerwi3pswjx/all_forms_PROACT_training2.txt?dl=0",sep="|", header=T)
head(training2)
training2<-read.delim("https://www.dropbox.com/s/ps9ouerwi3pswjx/all_forms_PROACT_training2.txt?dl=1",sep="|", header=T)
leaderboard<-read.delim("https://www.dropbox.com/s/uxeio2maq3wbjqp/all_forms_PROACT_leaderboard_full.txt?dl=1",sep="|", header=T)
validation<-read.delim("https://www.dropbox.com/s/8yonr4rgkdfh5cz/all_forms_PROACT_validation_full.txt?dl=1",sep="|", header=T)
head(validation)
head(leaderboard)
head(training2)
q()
setwd("~/Dropbox/datamed")
library(gapminder)
head(gapminder)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
gapminder %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point()
?lm
lm(lifeExp ~ gdpPercap, data = gapminder)
lm_fit = lm(lifeExp ~ gdpPercap, data = gapminder)
summary(lm_fit)
dim(gapminder)
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point()
gapminder %>%
filter(year == 2002) %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point()
gapminder %>%
filter(year %in% c(1952, 2002)) %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point()
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point()
lm(lifeExp ~ gdpPercap, data = gapminder[gapminder$year == 1953,])
lm(lifeExp ~ gdpPercap, data = gapminder[gapminder$year == 1952,])
lm_fit = lm(lifeExp ~ gdpPercap, data = gapminder[gapminder$year == 1952,])
summary(lm_fit)
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point() +
scale_x_log10()
lm(lifeExp ~ log10(gdpPercap), data = gapminder[gapminder$year == 1952,])
lm_fit = lm(lifeExp ~ log10(gdpPercap), data = gapminder[gapminder$year == 1952,])
summary(lm_fit)
dim(gapminder[gapminder$year ==
1952, ])
lm(lifeExp ~ log10(gdpPercap), data = gapminder[gapminder$year == 1952,])
lm_fit = lm(lifeExp ~ log10(gdpPercap), data = gapminder[gapminder$year == 1952,])
summary(lm_fit)
confint(lm_fit, level = 0.95)
?predict
predict(lm_fit, newdata = gapminder[gapminder$year == 1952], interval = 0.95)
predict(lm_fit, newdata = gapminder[gapminder$year == 1952, ], interval = 0.95)
predict(lm_fit, newdata = gapminder[gapminder$year == 1952, -gapminder$gdpPercap], interval = 0.95)
predict(lm_fit, interval = "predict")
predictions = predict(lm_fit, interval = "predict")
df = gapminder[gapminder$year == 1952,]
df_pred = cbind(df, predictions)
df_pred %>%
ggplot(aes(log10(gdpPercap), lifeExp)) +
geom_point() +
stat_smooth(method = "lm")
df_pred %>%
ggplot(aes(log10(gdpPercap), lifeExp)) +
geom_point() +
stat_smooth(method = "lm") +
geom_line(aes(y=lwr), linetype = "dashed")
df_pred %>%
ggplot(aes(log10(gdpPercap), lifeExp)) +
geom_point() +
stat_smooth(method = "lm") +
geom_line(aes(y=lwr), col = "red", linetype = "dashed") +
geom_line(aes(y=uwr), col = "red", linetype = "dashed")
df_pred %>%
ggplot(aes(log10(gdpPercap), lifeExp)) +
geom_point() +
stat_smooth(method = "lm") +
geom_line(aes(y=lwr), col = "red", linetype = "dashed") +
geom_line(aes(y=upr), col = "red", linetype = "dashed")
df_pred %>%
ggplot(aes(log10(gdpPercap), lifeExp)) +
geom_point() +
stat_smooth(method = "lm") +
geom_line(aes(y=lwr), col = "red", linetype = "dashed") +
geom_line(aes(y=upr), col = "red", linetype = "dashed")
gapminder_2002 = gapminder %>%
filter(year == 2002) %>%
mutate(gdpPercap_log = log10(gdpPercap)) %>%
select(lifeExp, gdpPercap_log)
pred = predict(lm.fit, gapminder_2002)
pred = predict(lm_fit, gapminder_2002)
gapminder_2002 = gapminder %>%
filter(year == 2002) %>%
mutate(gdpPercap_log = log10(gdpPercap)) %>%
select(lifeExp, gdpPercap_log)
gapminder_2002
gapminder_2002 = gapminder %>%
filter(year == 2002) %>%
select(lifeExp, gdpPercap)
pred = predict(lm_fit, gapminder_2002)
df = data.frame(observation = gapminder_2002$lifeExp, prediction = pred)
ggplot(df, aes(observation, prediction)) + geom_point() + geom_abline(slope = 1, intercept = 0)
rmse = function(x){
sqrt(sum((residuals(x)^2))/df.residual(x))
} # x = lm.fit
rmse(lm_fit) # gapminder_1952
rmse(lm(observation ~ prediction, df)) # gapminder 2002
predict(lm_fit, gapminder_2002, interval ="confidence")
predictions_2002 = predict(lm_fit, gapminder_2002, interval ="confidence")
q()
